import { Atom } from '@reatom/core';
import { AsyncAction } from '.';
export interface AsyncStatusesNeverPending {
    isPending: false;
    isFulfilled: false;
    isRejected: false;
    isSettled: false;
    isFirstPending: false;
    isEverPending: false;
    isEverSettled: false;
}
export interface AsyncStatusesFirstPending {
    isPending: true;
    isFulfilled: false;
    isRejected: false;
    isSettled: false;
    isFirstPending: true;
    isEverPending: true;
    isEverSettled: false;
}
export interface AsyncStatusesFulfilled {
    isPending: false;
    isFulfilled: true;
    isRejected: false;
    isSettled: true;
    isFirstPending: false;
    isEverPending: true;
    isEverSettled: true;
}
export interface AsyncStatusesRejected {
    isPending: false;
    isFulfilled: false;
    isRejected: true;
    isSettled: true;
    isFirstPending: false;
    isEverPending: true;
    isEverSettled: true;
}
export interface AsyncStatusesAnotherPending {
    isPending: true;
    isFulfilled: false;
    isRejected: false;
    isSettled: false;
    isFirstPending: false;
    isEverPending: true;
    isEverSettled: true;
}
export type AsyncStatusesPending = AsyncStatusesFirstPending | AsyncStatusesAnotherPending;
export type AsyncStatuses = AsyncStatusesNeverPending | AsyncStatusesPending | AsyncStatusesFulfilled | AsyncStatusesRejected;
export interface AsyncStatusesAtom extends Atom<AsyncStatuses> {
}
export declare const withStatusesAtom: <T extends AsyncAction<any[], any> & {
    statusesAtom?: AsyncStatusesAtom | undefined;
}>() => (anAsync: T) => T & {
    statusesAtom: AsyncStatusesAtom;
};
//# sourceMappingURL=withStatusesAtom.d.ts.map