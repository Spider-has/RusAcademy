import { Action, Atom, AtomState, Ctx, CtxSpy, Fn } from '@reatom/core';
import { type LensAtom, type LensAction } from './';
/** Filter updates by comparator function ("shallow equal" for atoms by default) */
export declare const filter: {
    <T extends Atom>(predicate?: T extends Action<infer Params, infer Payload> ? Fn<[Ctx, Payload, Params], boolean> : Fn<[CtxSpy, AtomState<T>, AtomState<T>], boolean>, name?: string): Fn<[
        T
    ], T extends Action<infer Params, infer Payload> ? LensAction<Params, Payload> : T extends Atom<infer State> ? LensAtom<State> : never>;
};
//# sourceMappingURL=filter.d.ts.map