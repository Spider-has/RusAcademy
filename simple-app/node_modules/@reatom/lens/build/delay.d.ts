import { Action, Atom, AtomState, Fn } from '@reatom/core';
import { type LensAtom, type LensAction } from './';
export interface DelayOptions {
    /** The minimum amount of the delay (debounce-like)
     * @default `max`
     */
    min?: number | Atom<number>;
    /** The maximum amount of the delay (throttle-like)
     * @default `min`
     */
    max?: number | Atom<number>;
    /** Should the first update be captured (throttle-like)?
     * @default true
     */
    leading?: boolean;
    /** Should the last update be captured (debounce-like)?
     * @default true
     */
    trailing?: boolean;
    /** Should subscribe to an AbortController from the cause?
     * @default true
     */
    abortable?: boolean;
}
/** Flexible updates delayer */
export declare const delay: {
    <T extends Atom>(options: DelayOptions, name?: string): Fn<[
        T
    ], T extends Action<infer Params, infer Payload> ? LensAction<Params, Payload> : LensAtom<AtomState<T>>>;
};
/** Delay updates by timeout */
export declare const debounce: {
    <T extends Atom>(wait: DelayOptions['min'], name?: string): Fn<[
        T
    ], T extends Action<infer Params, infer Payload> ? LensAction<Params, Payload> : LensAtom<AtomState<T>>>;
};
/** Skip updates by interval */
export declare const throttle: {
    <T extends Atom>(wait: DelayOptions['max'], name?: string): Fn<[
        T
    ], T extends Action<infer Params, infer Payload> ? LensAction<Params, Payload> : LensAtom<AtomState<T>>>;
};
//# sourceMappingURL=delay.d.ts.map