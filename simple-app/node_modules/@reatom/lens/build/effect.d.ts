import { Action, Atom, AtomState, Ctx, Fn, Unsubscribe } from '@reatom/core';
import { type LensAction } from './';
export interface LensEffect<Params extends any[] = any[], Payload = any> extends LensAction<Params, Payload> {
    unstable_unhook: Unsubscribe;
}
/** Create action which will invoked with the result of effect */
export declare const effect: {
    <T extends Atom, Res>(fn: T extends Action<infer Params, infer Payload> ? Fn<[Ctx, Awaited<Payload>, Params], Res> : Fn<[Ctx, AtomState<T>], Res>, name?: string): Fn<[
        T
    ], T extends Action<infer Params, infer Payload> ? LensEffect<[
        {
            params: [{
                params: Params;
                payload: Awaited<Payload>;
            }];
            payload: Awaited<Res>;
        }
    ], Awaited<Res>> : LensEffect<[
        {
            params: [AtomState<T>];
            payload: AtomState<T>;
        }
    ], Awaited<Res>>>;
};
//# sourceMappingURL=effect.d.ts.map