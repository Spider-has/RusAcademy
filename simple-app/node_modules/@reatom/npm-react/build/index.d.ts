import React from 'react';
import { Atom, AtomMut, AtomState, Ctx, CtxSpy, Fn } from '@reatom/core';
import { Binded } from '@reatom/lens';
declare let batch: (cb: Fn) => any;
export declare const setupBatch: (newBatch: typeof batch) => void;
export declare const withBatching: (ctx: Ctx) => Ctx;
export declare const reatomContext: React.Context<Ctx | null>;
export declare const useCtx: () => Ctx;
export declare const useCtxBind: () => <T extends Fn<any[], any>>(fn: T) => Binded<T>;
export declare const useAtom: {
    <T extends Atom>(atom: T, deps?: Array<any>, options?: boolean | {
        name?: string;
        subscribe?: boolean;
    }): [
        AtomState<T>,
        T extends Fn<[Ctx, ...infer Args], infer Res> ? Fn<Args, Res> : undefined,
        T,
        Ctx
    ];
    <T>(init: T | Fn<[CtxSpy], T>, deps?: Array<any>, options?: boolean | {
        name?: string;
        subscribe?: boolean;
    }): [T, Fn<[T | Fn<[T, Ctx], T>], T>, AtomMut<T>, Ctx];
};
export declare const useAtomCreator: <T extends Atom<any>>(creator: Fn<[], T>, deps?: Array<any>, options?: {
    subscribe?: boolean;
}) => [AtomState<T>, T extends Fn<[Ctx, ...infer Args], infer Res> ? Fn<Args, Res> : undefined, T, Ctx];
export declare const useUpdate: <T extends any[] | [any]>(cb: Fn<[Ctx, ...{ [K in keyof T]: T[K] extends Atom<any> ? AtomState<T[K]> : T[K]; }], any>, deps: T) => null;
export declare const useAction: <T extends Fn<[Ctx, ...any[]], any>>(fn: T, deps?: Array<any>, name?: string) => T extends Fn<[Ctx, ...infer Args], infer Res> ? Fn<Args, Res> : never;
export declare const useCreateCtx: (extension?: Fn<[Ctx]>) => Ctx;
export {};
//# sourceMappingURL=index.d.ts.map