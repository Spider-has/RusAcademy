import { AtomMut } from '@reatom/core';
import { WithReducers } from './withReducers';
export type EnumAtom<T extends string, Format extends 'camelCase' | 'snake_case' = 'camelCase'> = WithReducers<AtomMut<T>, {
    [K in T as Format extends 'camelCase' ? `set${Capitalize<K>}` : Format extends 'snake_case' ? `set_${K}` : never]: () => K;
} & {
    reset: () => T;
}> & {
    enum: {
        [K in T]: K;
    };
};
export type EnumAtomOptions<T extends string, Format extends 'camelCase' | 'snake_case' = 'camelCase'> = {
    name?: string;
    format?: Format;
    initState?: T extends any ? T : never;
};
export declare const reatomEnum: <T extends string, Format extends "camelCase" | "snake_case" = "camelCase">(variants: readonly T[], options?: string | EnumAtomOptions<T, Format>) => EnumAtom<T, Format>;
//# sourceMappingURL=reatomEnum.d.ts.map