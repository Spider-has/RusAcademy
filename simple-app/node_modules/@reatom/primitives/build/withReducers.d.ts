import { Action, AtomMut, AtomState, Fn, Rec } from '@reatom/core';
interface Reducers<A extends AtomMut> extends Rec<(state: AtomState<A>, ...args: Array<any>) => AtomState<A>> {
}
export type WithReducers<A extends AtomMut, R extends Reducers<A>> = A & {
    [K in keyof R]: R[K] extends Fn<[any, ...infer Args]> ? Action<Args, AtomState<A>> : never;
};
export declare const withReducers: <A extends AtomMut<any>, R extends Reducers<A>>(reducers: R) => (anAtom: A) => WithReducers<A, R>;
export {};
//# sourceMappingURL=withReducers.d.ts.map