import { Action, AtomMut, Ctx, Fn } from '@reatom/core';
export interface MapAtomReducers<Key, Element> {
    set(state: Map<Key, Element>, key: Key, el: Element): Map<Key, Element>;
    delete(state: Map<Key, Element>, key: Key): Map<Key, Element>;
    clear(): Map<Key, Element>;
    reset(): Map<Key, Element>;
}
export interface MapAtom<Key, Element> extends AtomMut<Map<Key, Element>> {
    set: Action<[key: Key, el: Element], Map<Key, Element>>;
    delete: Action<[key: Key], Map<Key, Element>>;
    clear: Action<[], Map<Key, Element>>;
    reset: Action<[], Map<Key, Element>>;
    get: Fn<[Ctx, Key], Element | undefined>;
    has: Fn<[Ctx, Key], boolean>;
}
export declare const reatomMap: <Key, Element_1>(initState?: Map<Key, Element_1>, name?: string) => MapAtom<Key, Element_1>;
//# sourceMappingURL=reatomMap.d.ts.map