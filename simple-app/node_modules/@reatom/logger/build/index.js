var core=require("@reatom/core");const isObject=thing=>"object"==typeof thing&&null!==thing,isShallowEqual=function(a,b,is){if(void 0===is&&(is=Object.is),Object.is(a,b))return!0;if(!isObject(a)||!isObject(b)||a.__proto__!==b.__proto__||a instanceof Error)return!1;if(Symbol.iterator in a){let equal=a instanceof Map?(a,b)=>is(a[0],b[0])&&is(a[1],b[1]):is,aIter=a[Symbol.iterator](),bIter=b[Symbol.iterator]();for(;;){let aNext=aIter.next(),bNext=bIter.next();if(aNext.done||bNext.done||!equal(aNext.value,bNext.value))return aNext.done&&bNext.done}}if(a instanceof Date)return a.getTime()===b.getTime();if(a instanceof RegExp)return String(a)===String(b);for(let k in a)if(k in b==0||!is(a[k],b[k]))return!1;return Object.keys(a).length===Object.keys(b).length},getCause=function(patch,log){return void 0===log&&(log=""),null!==patch.cause&&patch.cause.proto!==core.__root?getCause(patch.cause,log+" <-- "+patch.cause.proto.name??"unnamed"):log||"root"},getTimeStampDefault=()=>{let ms=(new Date).getMilliseconds();return ms=ms.toString().padStart(3,"0"),`${(new Date).toLocaleTimeString()} ${ms}ms`},createLogBatched=function(_temp){let{debounce:debounce=500,getTimeStamp:getTimeStamp=getTimeStampDefault,limit:limit=5e3,log:log=console.log,domain:domain="",shouldGroup:shouldGroup=!1}=void 0===_temp?{}:_temp;domain&&(domain=`(${domain}) `);let queue=[],isBatching=!1,batchingStart=Date.now();return msg=>{0!==Object.keys(msg.changes).length&&(isBatching||(isBatching=!0,batchingStart=Date.now()),setTimeout(length=>{if(isBatching=queue.length!==length&&Date.now()-batchingStart<limit,isBatching)return;const isFewTransactions=queue.length>0;console.groupCollapsed(`Reatom ${domain}${length} transaction${length>1?"s":""}`);for(const{changes:changes,time:time,error:error}of queue){console.log(`%c ${time}`,`padding-left: calc(50% - ${time.length/2}em); font-size: 0.7rem;`),error&&console.error(error);let inGroup=!1;Object.entries(changes).forEach((_ref,i,arr)=>{let[k,change]=_ref;const isAction="payload"in change,style=(isAction?"background: #ffff80; color: #151134;":"background: #151134; color: white;")+"font-weight: 400; padding: 0.15em;  padding-right: 1ch;",name=k.replace(/(\d)*\./,""),head=name.replace(/\..*/,""),nextK=arr[i+1]?.[0],nextName=nextK?.replace(/(\d)*\./,""),isGroup=nextName?.startsWith(head);shouldGroup&&!inGroup&&isGroup&&isFewTransactions&&(inGroup=!0,console.groupCollapsed(`%c ${head}`,style));const data=isAction?change.payload:change.newState;console.groupCollapsed(`%c ${name}`,style),console.log(change),console.groupEnd(),isAction&&!isShallowEqual(change.params,[data])&&log(...change.params),log(data),shouldGroup&&!isGroup&&inGroup&&(inGroup=!1,console.groupEnd())})}console.log("\n\n","transactions:",queue),console.groupEnd(),queue=[]},debounce,queue.push(Object.assign(msg,{time:getTimeStamp()}))))}};exports.connectLogger=function(ctx,_temp2){let{historyLength:historyLength=10,domain:domain="",log:log=createLogBatched({domain:domain}),showCause:showCause=!0,skip:skip=(()=>!1),skipUnnamed:skipUnnamed=!0}=void 0===_temp2?{}:_temp2;const history=new WeakMap;let read;return ctx.get(r=>read=r),ctx.subscribe((logs,error)=>{const states=new WeakMap,changes=logs.reduce((acc,patch,i)=>{const{proto:proto,state:state}=patch,{isAction:isAction}=proto;let{name:name}=proto;if(skip(patch))return acc;if(!name||name.startsWith("_")||/\._/.test(name)){if(skipUnnamed)return acc;name??="unnamed"}const oldCache=read(proto),oldState=states.has(proto)?states.get(proto):oldCache?.state;states.set(proto,state);const isConnection=!(oldCache||"root"!==patch.cause.proto.name||isAction&&0!==state.length);let atomHistory=history.get(proto)??[];if(!Object.is(state,oldState)&&historyLength&&(atomHistory=atomHistory.slice(0,historyLength-1),atomHistory.unshift(isAction?{...patch,state:[...state]}:patch),history.set(proto,atomHistory)),isConnection||Object.is(state,oldState))return acc;const changeMsg=acc[`${i+1}.${name}`]={patch:patch,history:atomHistory};if(isAction){const call=state.at(-1);changeMsg.params=call.params,changeMsg.payload=call.payload}else changeMsg.newState=state,changeMsg.oldState=oldState;return changeMsg.patch=patch,showCause&&(changeMsg.cause=getCause(patch)),acc},{});log({error:error,changes:changes,logs:logs,ctx:ctx})})},exports.createLogBatched=createLogBatched,exports.getCause=getCause;
//# sourceMappingURL=index.js.map
