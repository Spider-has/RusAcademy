import { AtomCache, Ctx, Fn, Rec } from '@reatom/core';
export interface unstable_ChangeMsg {
    newState?: any;
    oldState?: any;
    payload?: any;
    patch: AtomCache;
    cause?: string;
    history: Array<AtomCache>;
    params?: Array<any>;
}
export interface LogMsg {
    error: undefined | Error;
    changes: Rec<unstable_ChangeMsg>;
    logs: Array<AtomCache>;
    ctx: Ctx;
}
export declare const getCause: (patch: AtomCache, log?: string) => string;
export declare const createLogBatched: ({ debounce, getTimeStamp, limit, log, domain, shouldGroup, }?: {
    debounce?: number | undefined;
    getTimeStamp?: (() => string) | undefined;
    limit?: number | undefined;
    log?: {
        (...data: any[]): void;
        (message?: any, ...optionalParams: any[]): void;
    } | undefined;
    domain?: string | undefined;
    shouldGroup?: boolean | undefined;
}) => (msg: LogMsg) => void;
export declare const connectLogger: (ctx: Ctx, { historyLength, domain, log, showCause, skip, skipUnnamed, }?: {
    historyLength?: number | undefined;
    log?: Fn<[LogMsg], any> | undefined;
    domain?: string | undefined;
    showCause?: boolean | undefined;
    skipUnnamed?: boolean | undefined;
    skip?: ((patch: AtomCache) => boolean) | undefined;
}) => import("@reatom/core").Unsubscribe;
//# sourceMappingURL=index.d.ts.map